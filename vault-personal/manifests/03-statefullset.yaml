apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vault
spec:
  serviceName: vault
  replicas: 1
  selector:
    matchLabels:
      app: vault
  template:
    metadata:
      labels:
        app: vault
    spec:
      securityContext:
        fsGroup: 1005
      initContainers:
        - name: restore-perms
          image: alpine:3.18
          command:
            - sh
            - -c
            - |
              set -eux
              if [ ! -f /vault/data/vault_data_restored ]; then
                echo "Restoring Vault backup..."
                tar -xzf /backup/vault_backup.tar.gz -C /vault/data
                chown -R 1005:1005 /vault/data
                touch /vault/data/vault_data_restored
                echo "Restore complete."
              else
                echo "Backup already restored, skipping."
              fi
          volumeMounts:
            - name: vault-backup
              mountPath: /backup
            - name: vault-data
              mountPath: /vault/data
          securityContext:
            runAsUser: 0
            runAsGroup: 0
            runAsNonRoot: false

      containers:
        - name: vault
          image: hashicorp/vault:1.20
          ports:
            - containerPort: 8200
              name: vault-port
          env:
            - name: SKIP_CHOWN
              value: "true"
          volumeMounts:
            - name: vault-data
              mountPath: /vault/data
            - name: vault-config
              mountPath: /vault/config
              readOnly: true
          securityContext:
            runAsUser: 1005
            runAsGroup: 1005
            allowPrivilegeEscalation: false
            capabilities:
              add: [ "SETFCAP" ]

      volumes:
        - name: vault-backup
          hostPath:
            path: /PVC/vault
            type: Directory
        - name: vault-config
          configMap:
            name: vault-config
        - name: vault-data
          persistentVolumeClaim:
            claimName: vault-data-pvc